#!/usr/bin/env python

import os
import sys

imported_objects = {}
use_plain = True
use_ipython = False
use_bpython = False
use_pythonrc = False


def build_imports():
    from pprint import pprint
    imported_objects['pprint'] = pprint
    import random
    imported_objects['random'] = random

    def show(obj):
        pprint(vars(obj))

    imported_objects['show'] = show

    # HACK: Ugly way to run this script from a subdirectory, but it works
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)) + os.sep + os.pardir)

    # from promflask import create_app
    # app = create_app(__name__)
    # imported_objects['app'] = app

    # ctx = app.test_request_context()
    # ctx.push()
    # imported_objects['ctx'] = ctx

    # from flask_application import *
    # from flask_application.models import *

build_imports()

# Ripped from the django_extensions command library

try:
    if use_plain:
        # Don't bother loading B/IPython, because the user wants plain Python.
        raise ImportError
    try:
        if use_ipython:
            # User wants IPython
            raise ImportError
        from bpython import embed
        embed(imported_objects)
    except ImportError:
        # Explicitly pass an empty list as arguments, because otherwise IPython
        # would use sys.argv from this script.
        try:
            from IPython.core.iplib import InteractiveShell
            shell = InteractiveShell(user_ns=imported_objects)
        except ImportError:
            import IPython
            shell = IPython.Shell.IPShell(argv=[], user_ns=imported_objects)
        shell.mainloop()
except ImportError:
    # Using normal Python shell
    import code
    try:  # Try activating rlcompleter, because it's handy.
        import readline
    except ImportError:
        pass
    else:
        # We don't have to wrap the following import in a 'try', because
        # we already know 'readline' was imported successfully.
        import rlcompleter
        readline.set_completer(rlcompleter.Completer(imported_objects).complete)
        readline.parse_and_bind("tab:complete")

    # We want to honor both $PYTHONSTARTUP and .pythonrc.py, so follow system
    # conventions and get $PYTHONSTARTUP first then import user.
    if use_pythonrc:
        pythonrc = os.environ.get("PYTHONSTARTUP")
        if pythonrc and os.path.isfile(pythonrc):
            try:
                execfile(pythonrc)
            except NameError:
                pass
        # This will import .pythonrc.py as a side-effect
        import user
    code.interact(local=imported_objects)
